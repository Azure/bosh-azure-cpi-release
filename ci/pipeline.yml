---
shared:
  - &azure-environment-params
    AZURE_ENVIRONMENT:                    AzureCloud
    AZURE_TENANT_ID:                      ((cpi_azure_credentials_json.tenant_id))
    AZURE_SUBSCRIPTION_ID:                ((cpi_azure_credentials_json.subscription_id))
    AZURE_CLIENT_ID:                      ((cpi_azure_credentials_json.client_id))
    AZURE_CLIENT_SECRET:                  ((cpi_azure_credentials_json.client_secret))
    AZURE_CERTIFICATE: |
      ((bosh-azure-cpi/cpi_certificate_auth.private_key))
      ((bosh-azure-cpi/cpi_certificate_auth.certificate))

  - &create-bats-environment
    put: environment
    tags: [azure]
    params:
      delete_on_failure: true
      generate_random_name: true
      terraform_source: pipelines/azure/assets/terraform

  - &create-az-bats-environment
    put: environment
    tags: [azure]
    params:
      delete_on_failure: true
      generate_random_name: true
      terraform_source: bosh-cpi-src/ci/assets/terraform/az_bats

  - &destroy-bats-environment
    put: environment
    tags: [azure]
    params:
      action: destroy
      env_name_file: environment/name
      terraform_source: pipelines/azure/assets/terraform
    get_params:
      action: destroy

  - &destroy-az-bats-environment
    put: environment
    tags: [azure]
    params:
      action: destroy
      env_name_file: environment/name
      terraform_source: bosh-cpi-src/ci/assets/terraform/az_bats
    get_params:
      action: destroy

  - &prepare-director
    task: prepare-director
    file: pipelines/shared/tasks/prepare-director.yml
    image: azure-cpi-image
    params: &prepare-director-params
      INFRASTRUCTURE:     azure
      DIRECTOR_VARS_FILE:  |
        subscription_id: ((cpi_azure_credentials_json.subscription_id))
        tenant_id: ((cpi_azure_credentials_json.tenant_id))
        client_id: ((cpi_azure_credentials_json.client_id))
        client_secret: ((cpi_azure_credentials_json.client_secret))
        dns_recursor_ip: 8.8.8.8

  - &prepare-to-load-ruby-version-using-load_var
    get: bosh-cpi-src-in

  - &load-current-ruby-version-using-load_var
    load_var: ruby_version
    file: "bosh-cpi-src-in/src/bosh_azure_cpi/.ruby-version"
    format: raw
    reveal: true

  - &deploy-director
    task: deploy-director
    tags: [azure]
    file: pipelines/shared/tasks/deploy-director.yml
    image: azure-cpi-image
    params:
      RUBY_VERSION: ((ruby_version))


  - &run-bats
    task: run-bats
    tags: [azure]
    file: pipelines/shared/tasks/run-bats.yml
    image: azure-cpi-image
    params: &run-bats-params
      INFRASTRUCTURE:                     azure
      STEMCELL_NAME:                      bosh-azure-hyperv-ubuntu-jammy-go_agent
      BAT_INFRASTRUCTURE:                 azure
      BAT_RSPEC_FLAGS:                    "--tag ~raw_ephemeral_storage"
      RUBY_VERSION: ((ruby_version))

  - &run-az-bats
    task: run-az-bats
    tags: [azure]
    file: bosh-cpi-src/ci/tasks/run-az-bats.yml
    params: &run-az-bats-params
      INFRASTRUCTURE:                     azure
      STEMCELL_NAME:                      bosh-azure-hyperv-ubuntu-jammy-go_agent
      BAT_INFRASTRUCTURE:                 azure
      BAT_RSPEC_FLAGS:                    "--tag ~raw_ephemeral_storage"
      AZURE_BATS_ZONE:                    "1"

  - &teardown
    task: teardown
    tags: [azure]
    image: azure-cpi-image
    file: pipelines/shared/tasks/teardown.yml
    params:
      RUBY_VERSION: ((ruby_version))


  - &create-integration-environment
    put: environment
    tags: [azure]
    params:
      delete_on_failure: true
      generate_random_name: true
      terraform_source: bosh-cpi-src/ci/assets/terraform/integration

  - &destroy-integration-environment
    put: environment
    tags: [azure]
    params:
      action: destroy
      env_name_file: environment/name
      terraform_source: bosh-cpi-src/ci/assets/terraform/integration
    get_params:
      action: destroy

  - &upload-stemcell
    task: upload-stemcell
    tags: [azure]
    file: bosh-cpi-src/ci/tasks/upload-stemcell.yml
    params: &upload-stemcell-params
      <<: *azure-environment-params

  - &run-integration
    task: run-integration
    tags: [azure]
    file: bosh-cpi-src/ci/tasks/run-integration.yml
    params: &run-integration-params
      <<: *azure-environment-params
      SSH_PUBLIC_KEY: ((bosh-azure-cpi/integration_vm_keypair.public_key))

  - &run-integration-windows
    task: run-integration-windows
    tags: [azure]
    file: bosh-cpi-src/ci/tasks/run-integration-windows.yml
    params: &run-integration-windows-params
      <<: *run-integration-params

  - &ensure-cleanup
    task: ensure-cleanup
    tags: [azure]
    file: bosh-cpi-src/ci/tasks/ensure-cleanup.yml
    params:
      <<: *azure-environment-params

jobs:
  - name: build-candidate
    serial: true
    plan:
      - in_parallel:
        - {trigger: true, get: bosh-cpi-src, resource: bosh-cpi-src-in}
        - {trigger: false, get: version-semver, params: {bump: patch}}
        - {trigger: false, get: bosh-cli}
      - put: version-semver
        params: {file: version-semver/number}
      - task: build
        file: bosh-cpi-src/ci/tasks/build-candidate.yml
      - put: bosh-cpi-dev-artifacts
        params: {file: candidate/*.tgz}

  - name: integration-unmanaged-disks
    serial: true
    plan:
      - in_parallel:
        - {get: bosh-cpi-release, trigger: true,  resource: bosh-cpi-dev-artifacts, passed: [build-candidate]}
        - {get: bosh-cpi-src,     trigger: false, resource: bosh-cpi-src-in,        passed: [build-candidate]}
        - {get: stemcell,         trigger: false, resource: azure-ubuntu-stemcell, tags: [azure]}
      - <<: *create-integration-environment
      - do:
        - <<: *upload-stemcell
        - <<: *run-integration
          params:
            <<: *run-integration-params
            AZURE_USE_MANAGED_DISKS: false
        ensure:
          do:
            - <<: *destroy-integration-environment
          ensure:
            do:
              - <<: *ensure-cleanup

  - name: integration-managed-disks
    serial: true
    plan:
      - in_parallel:
        - {get: bosh-cpi-release, trigger: true,  resource: bosh-cpi-dev-artifacts, passed: [build-candidate]}
        - {get: bosh-cpi-src,     trigger: false, resource: bosh-cpi-src-in,        passed: [build-candidate]}
        - {get: stemcell,         trigger: false, resource: azure-ubuntu-stemcell, tags: [azure]}
      - <<: *create-integration-environment
      - do:
        - <<: *upload-stemcell
        - <<: *run-integration
          params:
            <<: *run-integration-params
            AZURE_USE_MANAGED_DISKS: true
        ensure:
          do:
            - <<: *destroy-integration-environment
          ensure:
            do:
              - <<: *ensure-cleanup

  - name: integration-windows-unmanaged-disks
    serial: true
    plan:
      - in_parallel:
        - {get: bosh-cpi-release, trigger: true,  resource: bosh-cpi-dev-artifacts, passed: [build-candidate]}
        - {get: bosh-cpi-src,     trigger: false, resource: bosh-cpi-src-in,        passed: [build-candidate]}
        - {get: stemcell,         trigger: false, resource: azure-windows-stemcell, tags: [azure]}
      - <<: *create-integration-environment
      - do:
        - <<: *upload-stemcell
          params:
            <<: *azure-environment-params
            IS_HEAVY_STEMCELL: false
        - <<: *run-integration-windows
          params:
            <<: *run-integration-windows-params
            AZURE_USE_MANAGED_DISKS: false
        ensure:
          do:
            - <<: *destroy-integration-environment
          ensure:
            do:
              - <<: *ensure-cleanup

  - name: integration-windows-managed-disks
    serial: true
    plan:
      - in_parallel:
        - {get: bosh-cpi-release, trigger: true,  resource: bosh-cpi-dev-artifacts, passed: [build-candidate]}
        - {get: bosh-cpi-src,     trigger: false, resource: bosh-cpi-src-in,        passed: [build-candidate]}
        - {get: stemcell,         trigger: false, resource: azure-windows-stemcell, tags: [azure]}
      - <<: *create-integration-environment
      - do:
        - <<: *upload-stemcell
          params:
            <<: *azure-environment-params
            IS_HEAVY_STEMCELL: false
        - <<: *run-integration-windows
          params:
            <<: *run-integration-windows-params
            AZURE_USE_MANAGED_DISKS: true
        ensure:
          do:
            - <<: *destroy-integration-environment
          ensure:
            do:
              - <<: *ensure-cleanup

  - name: bats-unmanaged-disks
    serial: true
    plan:
      - in_parallel:
        - {get: cpi-release,     trigger: true,  resource: bosh-cpi-dev-artifacts, passed: [build-candidate]}
        - {get: bosh-release,    trigger: false, resource: bosh-release}
        - {get: bosh-cpi-src,    trigger: false, resource: bosh-cpi-src-in,        passed: [build-candidate]}
        - {get: stemcell,        trigger: true, resource: azure-ubuntu-stemcell, tags: [azure]}
        - {get: bosh-deployment, trigger: false}
        - {get: pipelines,       trigger: false}
        - {get: bosh-cli,        trigger: false}
        - {get: bats,            trigger: false}
        - {get: azure-cpi-image, trigger: false}
      - <<: *create-bats-environment
      - do:
        - <<: *prepare-director
          params:
            <<: *prepare-director-params
            OPTIONAL_OPS_FILE: |
              -o pipelines/shared/assets/ops/remove-hm.yml
              -o bosh-deployment/external-ip-not-recommended.yml
        - do:
          - <<: *prepare-to-load-ruby-version-using-load_var
          - <<: *load-current-ruby-version-using-load_var
          - <<: *deploy-director
          - <<: *run-bats
          ensure:
            do:
              - <<: *teardown
        ensure:
          do:
            - <<: *destroy-bats-environment
          ensure:
            do:
              - <<: *ensure-cleanup

  - name: bats-managed-disks
    serial: true
    plan:
      - in_parallel:
        - {get: cpi-release,     trigger: true,  resource: bosh-cpi-dev-artifacts, passed: [build-candidate]}
        - {get: bosh-release,    trigger: false, resource: bosh-release}
        - {get: bosh-cpi-src,    trigger: false, resource: bosh-cpi-src-in,        passed: [build-candidate]}
        - {get: stemcell,        trigger: false, resource: azure-ubuntu-stemcell, tags: [azure]}
        - {get: bosh-deployment, trigger: false}
        - {get: pipelines,       trigger: false}
        - {get: bosh-cli,        trigger: false}
        - {get: bats,            trigger: false}
        - {get: azure-cpi-image, trigger: false}
      - <<: *create-az-bats-environment
      - do:
        - <<: *prepare-director
          params:
            <<: *prepare-director-params
            OPTIONAL_OPS_FILE: |
              -o pipelines/shared/assets/ops/remove-hm.yml
              -o bosh-deployment/external-ip-not-recommended.yml
              -o bosh-deployment/azure/use-managed-disks.yml
        - do:
          - <<: *prepare-to-load-ruby-version-using-load_var
          - <<: *load-current-ruby-version-using-load_var
          - <<: *deploy-director
          - <<: *run-az-bats
          ensure:
            do:
              - <<: *teardown
        ensure:
          do:
            - <<: *destroy-az-bats-environment
          ensure:
            do:
              - <<: *ensure-cleanup

  - name: promote-candidate-major
    plan:
      - in_parallel:
        - {trigger: false, get: bosh-cpi-release, resource: bosh-cpi-dev-artifacts, passed: [integration-unmanaged-disks, integration-managed-disks, integration-windows-unmanaged-disks, integration-windows-managed-disks, bats-unmanaged-disks, bats-managed-disks]}
        - {trigger: false, get: bosh-cpi-src, resource: bosh-cpi-src-out}
        - {trigger: false, get: release-version-semver, params: {bump: major}}
        - {trigger: false, get: bosh-cli}
      - task: promote
        file: bosh-cpi-src/ci/tasks/promote-candidate.yml
        params:
          S3_ACCESS_KEY_ID:     ((bosh-azure-cpi-uploaded_assume_aws_access_key.username))
          S3_SECRET_ACCESS_KEY: ((bosh-azure-cpi-uploaded_assume_aws_access_key.password))
          S3_ROLE_ARN:          ((bosh-azure-cpi-uploaded_assume_aws_access_key.role_arn))
      - put: bosh-cpi-src
        resource: bosh-cpi-src-out
        params: {repository: promoted/repo, rebase: true, tag_prefix: "v", tag: promoted/semver_version}
      - put: release-version-semver
        params: {file: release-version-semver/number}

  - name: promote-candidate-minor
    plan:
      - in_parallel:
        - {trigger: false, get: bosh-cpi-release, resource: bosh-cpi-dev-artifacts, passed: [integration-unmanaged-disks, integration-managed-disks, integration-windows-unmanaged-disks, integration-windows-managed-disks, bats-unmanaged-disks, bats-managed-disks]}
        - {trigger: false, get: bosh-cpi-src, resource: bosh-cpi-src-out}
        - {trigger: false, get: release-version-semver, params: {bump: minor}}
        - {trigger: false, get: bosh-cli}
      - task: promote
        file: bosh-cpi-src/ci/tasks/promote-candidate.yml
        params:
          S3_ACCESS_KEY_ID:     ((bosh-azure-cpi-uploaded_assume_aws_access_key.username))
          S3_SECRET_ACCESS_KEY: ((bosh-azure-cpi-uploaded_assume_aws_access_key.password))
          S3_ROLE_ARN:          ((bosh-azure-cpi-uploaded_assume_aws_access_key.role_arn))
      - put: bosh-cpi-src
        resource: bosh-cpi-src-out
        params: {repository: promoted/repo, rebase: true, tag_prefix: "v", tag: promoted/semver_version}
      - put: release-version-semver
        params: {file: release-version-semver/number}

  - name: promote-candidate-patch
    plan:
      - in_parallel:
        - {trigger: false, get: bosh-cpi-release, resource: bosh-cpi-dev-artifacts, passed: [integration-unmanaged-disks, integration-managed-disks, integration-windows-unmanaged-disks, integration-windows-managed-disks, bats-unmanaged-disks, bats-managed-disks]}
        - {trigger: false, get: bosh-cpi-src, resource: bosh-cpi-src-out}
        - {trigger: false, get: release-version-semver, params: {bump: patch}}
        - {trigger: false, get: bosh-cli}
      - task: promote
        file: bosh-cpi-src/ci/tasks/promote-candidate.yml
        params:
          S3_ACCESS_KEY_ID:     ((bosh-azure-cpi-uploaded_assume_aws_access_key.username))
          S3_SECRET_ACCESS_KEY: ((bosh-azure-cpi-uploaded_assume_aws_access_key.password))
          S3_ROLE_ARN:          ((bosh-azure-cpi-uploaded_assume_aws_access_key.role_arn))
      - put: bosh-cpi-src
        resource: bosh-cpi-src-out
        params: {repository: promoted/repo, rebase: true, tag_prefix: "v", tag: promoted/semver_version}
      - put: release-version-semver
        params: {file: release-version-semver/number}

  - name: build-docker-image
    plan:
      - get: bosh-azure-cpi-release
        resource: bosh-azure-cpi-release-dockerfile-src
        trigger: true
      - task: extract-ruby-version-from-release
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: busybox }
          run:
            path: sh
            args:
              - -exc
              - |
                  echo "{\"RUBY_VERSION\": \"$(cat bosh-azure-cpi-release/src/bosh_azure_cpi/.ruby-version)\"}" > build-args/args.json
          inputs:
            - name: bosh-azure-cpi-release
          outputs:
            - name: build-args
      - put: azure-cpi-docker-image
        params:
          build: bosh-azure-cpi-release/ci/docker/boshcpi.azure-cpi-release/
          build_args_file: build-args/args.json

  - name: bump-deps
    plan:
    - in_parallel:
      - get: bosh-cpi-src
        resource: bosh-cpi-src-in
      - get: ruby-release
      - get: bosh-ruby-release-registry-image
      - get: weekly
        trigger: true
    - task: bump-gems
      image: bosh-ruby-release-registry-image
      file: ruby-release/ci/tasks/shared/bump-gems.yml
      input_mapping:
        input-repo: bosh-cpi-src
      output_mapping:
        output-repo: bosh-cpi-src
      params:
        GEM_DIRS: src/bosh_azure_cpi
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: bots@cloudfoundry.org
        PACKAGE: ruby-3.2
        VENDOR: true
    - put: bosh-cpi-src-out
      params:
        repository: bosh-cpi-src
        rebase: true

  - name: bump-bosh-packages
    plan:
    - in_parallel:
      - get: bosh-cpi-src
        resource: bosh-cpi-src-in
      - get: ruby-release
        trigger: true
      - get: bosh-ecosystem-concourse-image
    - task: bump-ruby-package
      image: bosh-ecosystem-concourse-image
      file: ruby-release/ci/tasks/shared/bump-ruby-package.yml
      input_mapping:
        bosh-release: bosh-cpi-src
      output_mapping:
        bosh-release: bosh-cpi-src
      params:
        GIT_USER_NAME: CI Bot
        GIT_USER_EMAIL: cf-bosh-eng@pivotal.io
        PACKAGE: ruby-3.2
        PACKAGE_PREFIX: azure-cpi
        PRIVATE_YML: |
          blobstore:
            provider: s3
            options:
              access_key_id:     ((bosh-azure-cpi-uploaded_assume_aws_access_key.username))
              secret_access_key: ((bosh-azure-cpi-uploaded_assume_aws_access_key.password))
              assume_role_arn: ((bosh-azure-cpi-uploaded_assume_aws_access_key.role_arn))
        RUBY_VERSION_PATH: src/bosh_azure_cpi/.ruby-version
    - put: bosh-cpi-src-out
      params:
        repository: bosh-cpi-src
        rebase: true

resource_types:
  - name: terraform_type
    type: docker-image
    source:
      repository: ljfranklin/terraform-resource

  - name: semver
    type: docker-image
    source:
      repository: concourse/semver-resource
      tag: 1.6
resources:
  - name: azure-cpi-image
    type: docker-image
    source:
      repository: boshcpi/azure-cpi-release
      username: ((docker.username))
      password: ((docker.password))

  - name: bosh-cpi-dev-artifacts
    type: s3
    source:
      regexp: bosh-azure-cpi-(\d+\.\d+\.\d+)\.tgz
      bucket: azure-pipeline-bucket
      region_name: us-east-1
      access_key_id: ((bosh-azure-cpi-uploaded_assume_aws_access_key.username))
      secret_access_key: ((bosh-azure-cpi-uploaded_assume_aws_access_key.password))
      aws_role_arn: ((bosh-azure-cpi-uploaded_assume_aws_access_key.role_arn))
  - name: bosh-cpi-src-in
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-azure-cpi-release.git
      branch: master
      ignore_paths:
        - .final_builds/**/*.yml
        - releases/**/*.yml
  - name: bosh-cpi-src-out
    type: git
    source:
      uri: git@github.com:cloudfoundry/bosh-azure-cpi-release.git
      branch: master
      private_key: ((github_deploy_key_bosh-azure-cpi-release.private_key))
  - name: bosh-azure-cpi-release-dockerfile-src
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-azure-cpi-release.git
      paths:
        - ci/docker/boshcpi.azure-cpi-release/Dockerfile
        - src/bosh_azure_cpi/.ruby-version
  - name: version-semver
    type: semver
    source:
      key:               current-version # dev-release version
      bucket:            azure-pipeline-bucket
      access_key_id:     ((bosh-azure-cpi-uploaded_assume_aws_access_key.username))
      secret_access_key: ((bosh-azure-cpi-uploaded_assume_aws_access_key.password))
      assume_role_arn:   ((bosh-azure-cpi-uploaded_assume_aws_access_key.role_arn))
  - name: release-version-semver
    type: semver
    source:
      key:               release-current-version
      bucket:            azure-pipeline-bucket
      access_key_id:     ((bosh-azure-cpi-uploaded_assume_aws_access_key.username))
      secret_access_key: ((bosh-azure-cpi-uploaded_assume_aws_access_key.password))
      assume_role_arn:   ((bosh-azure-cpi-uploaded_assume_aws_access_key.role_arn))
  - name: environment
    type: terraform_type
    source:
      backend_type: s3
      backend_config:
        access_key:     ((bosh-azure-cpi-uploaded_assume_aws_access_key.username))
        secret_key:     ((bosh-azure-cpi-uploaded_assume_aws_access_key.password))
        role_arn:       ((bosh-azure-cpi-uploaded_assume_aws_access_key.role_arn))
        bucket:         azure-pipeline-bucket
        region: us-east-1
        key:            terraform-state/terraform.tfstate
      vars:
        location:              eastus2
        azure_environment:     AzureCloud
        azure_subscription_id: ((cpi_azure_credentials_json.subscription_id))
        azure_client_id:       ((cpi_azure_credentials_json.client_id))
        azure_client_secret:   ((cpi_azure_credentials_json.client_secret))
        azure_tenant_id:       ((cpi_azure_credentials_json.tenant_id))
        resource_group_prefix: azurecpi
  - name: bosh-cli
    type: s3
    source:
      regexp: bosh-cli-([0-9.]+)-linux-amd64
      bucket: bosh-cli-artifacts
      region_name: us-east-1
  - name: pipelines
    type: git
    source:
      uri: https://github.com/cloudfoundry-incubator/bosh-cpi-certification
      branch: master
  - name: bosh-release
    type: bosh-io-release
    source:
      repository: cloudfoundry/bosh
  - name: azure-ubuntu-stemcell
    type: bosh-io-stemcell
    source:
      name: bosh-azure-hyperv-ubuntu-jammy-go_agent
  - name: azure-windows-stemcell
    type: bosh-io-stemcell
    source:
      name: bosh-azure-hyperv-windows2019-go_agent
  - name: bats
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-acceptance-tests.git
      branch: master
  - name: bosh-deployment
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-deployment
      branch: master
  - name: azure-cpi-docker-image
    type: docker-image
    source:
      repository: boshcpi/azure-cpi-release
      username: ((docker.username))
      password: ((docker.password))
  - name: bosh-ruby-release-registry-image
    type: registry-image
    source:
      repository: bosh/ruby-release
      username: ((docker.username))
      password: ((docker.password))
  - name: ruby-release
    type: git
    source:
      uri: https://github.com/cloudfoundry/bosh-package-ruby-release.git
  - name: bosh-ecosystem-concourse-image
    type: registry-image
    source:
      repository: bosh/bosh-ecosystem-concourse
      username: ((docker.username))
      password: ((docker.password))
  - name: weekly
    type: time
    source:
      start: 3:00 -0700
      stop: 4:30 -0700
      days: [ Saturday ]
